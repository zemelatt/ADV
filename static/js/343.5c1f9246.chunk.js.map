{"version":3,"file":"static/js/343.5c1f9246.chunk.js","mappings":"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","sources":["Component/Input-and-textarea-Formats/InputFormat.js","Component/Register-Login/userValidator.js","Component/Register-Login/Register.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst InputFormat = ({\r\n  InputClassName,\r\n  TextType,\r\n  NameOfInput,\r\n  OnPlaceHolder,\r\n  AutoOption,\r\n  OnChangingInputs,\r\n  ValueOfInput,\r\n  AcceptAttr,\r\n  RefValue,\r\n}) => {\r\n  return (\r\n    <input\r\n      className={InputClassName}\r\n      type={TextType}\r\n      name={NameOfInput}\r\n      placeholder={OnPlaceHolder}\r\n      autoComplete={AutoOption}\r\n      onChange={OnChangingInputs}\r\n      value={ValueOfInput}\r\n      accept={AcceptAttr}\r\n      ref={RefValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputFormat;\r\n","const emailValidat = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/;\r\nfunction EmailValidator(email) {\r\n  let nameRegex = emailValidat.test(email.trim());\r\n  if (nameRegex) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nfunction nameValidator(name) {\r\n  const nameValidator = /^[a-zA-Z_]+( [a-zA-Z+_]+)*$/;\r\n  const valdatedName = nameValidator.test(name);\r\n  if (name.length > 5 && valdatedName) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\nexport { EmailValidator, nameValidator };\r\n","import React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nimport \"./register-login.css\";\r\n\r\nimport InputFormat from \"../Input-and-textarea-Formats/InputFormat\";\r\nimport { nameValidator, EmailValidator } from \"./userValidator\";\r\n\r\nconst Register = () => {\r\n  const push = useNavigate();\r\n\r\n  const [err, setErr] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [password2, setPassword2] = useState(\"\");\r\n  const [pass, setPass] = useState(\"none\");\r\n  const [Empass, setEmpass] = useState(\"none\");\r\n  const [passworderr, setPassworderr] = useState(\"none\");\r\n\r\n  const getName = (e) => {\r\n    let isTrue = nameValidator(e.target.value.trim());\r\n    if (isTrue) {\r\n      setPass(\"pass\");\r\n      setErr(\"\");\r\n    } else {\r\n      setPass(\"\");\r\n      setErr(\"name should be more than 5 characters\");\r\n    }\r\n    setName(e.target.value);\r\n  };\r\n  const getEmail = (e) => {\r\n    let nameRegex = EmailValidator(e.target.value);\r\n    if (nameRegex) {\r\n      setEmpass(\"Empass\");\r\n      setErr(\"\");\r\n    } else {\r\n      setEmpass(\"\");\r\n      setErr(\"use valid email format\");\r\n    }\r\n    setEmail(e.target.value);\r\n  };\r\n  const getPassword = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n  const getPassword2 = (e) => {\r\n    setPassword2(e.target.value);\r\n  };\r\n  const submitt = (e) => {\r\n    e.preventDefault();\r\n    let formData = new FormData();\r\n    formData.append(\"name\", name);\r\n    formData.append(\"email\", email);\r\n    formData.append(\"password\", password);\r\n    formData.append(\"password2\", password2);\r\n    const nameValidat = /^[a-zA-Z_]+( [a-zA-Z+_]+)*$/;\r\n    const valdatedName = nameValidat.test(name);\r\n    const emailValidator = /[^\\s@]+@[^\\s@]+\\.[^\\s@]+/;\r\n    let nameRegex = emailValidator.test(email.trim());\r\n\r\n    if (!valdatedName) {\r\n      setErr(\"Err: You cant use character in name !\");\r\n    } else if (name.trim().length < 5) {\r\n      setErr(\"Err: name should be more than 4 letters!\");\r\n    } else if (password !== password2) {\r\n      setErr(\"Err: password doesn't much!\");\r\n      setPassworderr(\"passERR\");\r\n    } else if (!nameRegex) {\r\n      setErr(\"Err: use email format!\");\r\n    } else {\r\n      Axios.post(\"http://localhost:2222/member\", formData).then((response) => {\r\n        setErr(response.data.msg);\r\n      });\r\n      return push(\"/login\");\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"form-container\">\r\n        <div className=\"regForm\">\r\n          <h1 className=\"header\">Register</h1>\r\n          <h4 className=\"errDisplayer\">{err}</h4>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Name </label>\r\n            <InputFormat\r\n              InputClassName={`inputPl ${pass}`}\r\n              TextType=\"text\"\r\n              NameOfInput=\"name\"\r\n              OnPlaceHolder=\"Abebe kebede\"\r\n              AutoOption=\"off\"\r\n              OnChangingInputs={getName}\r\n              ValueOfInput={name}\r\n            />\r\n          </div>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Email</label>\r\n            <InputFormat\r\n              InputClassName={`inputPl ${Empass}`}\r\n              TextType=\"email\"\r\n              NameOfInput=\"email\"\r\n              OnPlaceHolder=\"Abebe kebede\"\r\n              AutoOption=\"off\"\r\n              OnChangingInputs={getEmail}\r\n              ValueOfInput={email}\r\n            />\r\n          </div>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Password</label>\r\n\r\n            <InputFormat\r\n              InputClassName={`inputPl ${passworderr}`}\r\n              TextType=\"password\"\r\n              NameOfInput=\"password\"\r\n              OnChangingInputs={getPassword}\r\n              ValueOfInput={password}\r\n              required\r\n            />\r\n          </div>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Repeat your password</label>\r\n\r\n            <InputFormat\r\n              InputClassName={`inputPl ${passworderr}`}\r\n              TextType=\"password\"\r\n              NameOfInput=\"password2\"\r\n              OnChangingInputs={getPassword2}\r\n              required\r\n              ValueOfInput={password2}\r\n            />\r\n          </div>\r\n\r\n          <button className=\"submit-btn\" onClick={submitt}>\r\n            Submit\r\n          </button>\r\n          <div>\r\n            <p style={{ color: \"white\" }}>\r\n              If you have an account already{\" \"}\r\n              <Link to=\"/login\" style={{ color: \"lightblue\" }}>\r\n                Login\r\n              </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["InputClassName","TextType","NameOfInput","OnPlaceHolder","AutoOption","OnChangingInputs","ValueOfInput","AcceptAttr","RefValue","className","type","name","placeholder","autoComplete","onChange","value","accept","ref","emailValidat","push","useNavigate","useState","err","setErr","setName","email","setEmail","password","setPassword","password2","setPassword2","pass","setPass","Empass","setEmpass","passworderr","setPassworderr","InputFormat","e","isTrue","valdatedName","test","length","nameValidator","target","trim","nameRegex","EmailValidator","required","onClick","preventDefault","formData","FormData","append","Axios","then","response","data","msg","style","color","to"],"sourceRoot":""}