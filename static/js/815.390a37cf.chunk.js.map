{"version":3,"file":"static/js/815.390a37cf.chunk.js","mappings":"oHA4BA,IA1BoB,SAAH,GAUV,IATLA,EAAc,EAAdA,eACAC,EAAQ,EAARA,SACAC,EAAW,EAAXA,YACAC,EAAa,EAAbA,cACAC,EAAU,EAAVA,WACAC,EAAgB,EAAhBA,iBACAC,EAAY,EAAZA,aACAC,EAAU,EAAVA,WACAC,EAAQ,EAARA,SAEA,OACE,kBACEC,UAAWT,EACXU,KAAMT,EACNU,KAAMT,EACNU,YAAaT,EACbU,aAAcT,EACdU,SAAUT,EACVU,MAAOT,EACPU,OAAQT,EACRU,IAAKT,GAGX,C,qICgFA,UAhGc,WACZ,IAAMU,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,MACb,GAAsBC,EAAAA,EAAAA,UAAS,IAAG,eAA3BC,EAAG,KAAEC,EAAM,KAClB,GAAwBF,EAAAA,EAAAA,UAAS,IAAG,eAA7BX,EAAI,KAAEc,EAAO,KACpB,GAAgCH,EAAAA,EAAAA,UAAS,IAAG,eAArCI,EAAQ,KAAEC,EAAW,KA+B5B,OACE,0BACE,gBAAKlB,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,UAAS,WACtB,eAAIA,UAAU,SAAQ,SAAC,YACvB,eAAIA,UAAU,eAAc,SAAEc,KAC9B,iBAAKd,UAAU,iBAAgB,WAC7B,2BAAO,WAEP,SAAC,IAAW,CACVT,eAAe,UACfC,SAAS,OACTC,YAAY,OACZC,cAAc,eACdC,WAAW,MACXC,iBA7CI,SAACuB,GACfH,EAAQG,EAAEC,OAAOd,MACnB,EA4CYT,aAAcK,QAGlB,iBAAKF,UAAU,iBAAgB,WAC7B,2BAAO,cAEP,SAAC,IAAW,CACVT,eAAe,UACfC,SAAS,WACTC,YAAY,WACZC,cAAc,aACd2B,UAAQ,EACRzB,iBAvDQ,SAACuB,GACnBD,EAAYC,EAAEC,OAAOd,MACvB,EAsDYT,aAAcoB,QAIlB,mBAAQjB,UAAU,aAAasB,QAzDvB,SAACH,GACfA,EAAEI,iBACF,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,OAAQxB,GACxBsB,EAASE,OAAO,WAAYT,GAEvBf,EAAKyB,OAEEV,EAASU,OAGnBC,EAAAA,EAAAA,KAAW,8BAA+BJ,EAAU,CAClDK,iBAAiB,IAChBC,MAAK,SAACC,GACP,QAAyBC,GAArBD,EAASE,KAAKC,IAGhB,OAFAC,eAAeC,QAAQ,SAAUL,EAASE,KAAKI,IAC/C5B,GAAS6B,EAAAA,EAAAA,IAAQP,EAASE,KAAKM,cACxB5B,EAAK,KAEZI,EAAOgB,EAASE,KAAKC,IAEzB,IAZAnB,EAAO,0BAFPA,EAAO,qBAgBX,EAkCwD,SAAC,WAGjD,4BACE,gBAAKf,UAAU,UAAS,UACtB,cAAGwC,MAAO,CAAEC,MAAO,SAAU,SAAC,2CAIhC,0BACE,SAAC,KAAI,CAACC,GAAG,sBAAsBF,MAAO,CAAEC,MAAO,aAAc,SAAC,yBAIhE,eAAGD,MAAO,CAAEC,MAAO,SAAU,UAAC,+BACC,KAC7B,SAAC,KAAI,CAACC,GAAG,YAAYF,MAAO,CAAEC,MAAO,aAAc,SAAC,yBASlE,C","sources":["Component/Input-and-textarea-Formats/InputFormat.js","Component/Register-Login/Login.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst InputFormat = ({\r\n  InputClassName,\r\n  TextType,\r\n  NameOfInput,\r\n  OnPlaceHolder,\r\n  AutoOption,\r\n  OnChangingInputs,\r\n  ValueOfInput,\r\n  AcceptAttr,\r\n  RefValue,\r\n}) => {\r\n  return (\r\n    <input\r\n      className={InputClassName}\r\n      type={TextType}\r\n      name={NameOfInput}\r\n      placeholder={OnPlaceHolder}\r\n      autoComplete={AutoOption}\r\n      onChange={OnChangingInputs}\r\n      value={ValueOfInput}\r\n      accept={AcceptAttr}\r\n      ref={RefValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default InputFormat;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\n\r\nimport \"./register-login.css\";\r\nimport InputFormat from \"../Input-and-textarea-Formats/InputFormat\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addTodo } from \"../../redux/counterSlice\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch(); // dispach\r\n  const push = useNavigate();\r\n  const [err, setErr] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const getName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const getPassword = (e) => {\r\n    setPassword(e.target.value);\r\n  };\r\n  const submitt = (e) => {\r\n    e.preventDefault();\r\n    let formData = new FormData();\r\n    formData.append(\"name\", name);\r\n    formData.append(\"password\", password);\r\n\r\n    if (!name.trim()) {\r\n      setErr(\"Err: name is empty\");\r\n    } else if (!password.trim()) {\r\n      setErr(\"Err: password is empty\");\r\n    } else {\r\n      Axios.post(\"http://localhost:2222/login\", formData, {\r\n        withCredentials: true,\r\n      }).then((response) => {\r\n        if (response.data.msg == undefined) {\r\n          sessionStorage.setItem(\"userId\", response.data.id);\r\n          dispatch(addTodo(response.data.destination)); //redux\r\n          return push(\"/\");\r\n        } else {\r\n          setErr(response.data.msg);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"form-container\">\r\n        <div className=\"regForm\">\r\n          <h1 className=\"header\">Log in</h1>\r\n          <h4 className=\"errDisplayer\">{err}</h4>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Name </label>\r\n\r\n            <InputFormat\r\n              InputClassName=\"inputPl\"\r\n              TextType=\"text\"\r\n              NameOfInput=\"name\"\r\n              OnPlaceHolder=\"Abebe kebede\"\r\n              AutoOption=\"off\"\r\n              OnChangingInputs={getName}\r\n              ValueOfInput={name}\r\n            />\r\n          </div>\r\n          <div className=\"inputdisplayer\">\r\n            <label>Password</label>\r\n\r\n            <InputFormat\r\n              InputClassName=\"inputPl\"\r\n              TextType=\"password\"\r\n              NameOfInput=\"password\"\r\n              OnPlaceHolder=\"**********\"\r\n              required\r\n              OnChangingInputs={getPassword}\r\n              ValueOfInput={password}\r\n            />\r\n          </div>\r\n\r\n          <button className=\"submit-btn\" onClick={submitt}>\r\n            Login\r\n          </button>\r\n          <div>\r\n            <div className=\"fortest\">\r\n              <p style={{ color: \"white\" }}>\r\n                Demo - name: admin password: test12\r\n              </p>\r\n            </div>\r\n            <div>\r\n              <Link to=\"/formating/password\" style={{ color: \"lightblue\" }}>\r\n                Forgot password ?\r\n              </Link>\r\n            </div>\r\n            <p style={{ color: \"white\" }}>\r\n              If you don't have an account{\" \"}\r\n              <Link to=\"/register\" style={{ color: \"lightblue\" }}>\r\n                Register\r\n              </Link>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["InputClassName","TextType","NameOfInput","OnPlaceHolder","AutoOption","OnChangingInputs","ValueOfInput","AcceptAttr","RefValue","className","type","name","placeholder","autoComplete","onChange","value","accept","ref","dispatch","useDispatch","push","useNavigate","useState","err","setErr","setName","password","setPassword","e","target","required","onClick","preventDefault","formData","FormData","append","trim","Axios","withCredentials","then","response","undefined","data","msg","sessionStorage","setItem","id","addTodo","destination","style","color","to"],"sourceRoot":""}